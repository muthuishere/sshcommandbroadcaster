/* 
 * Copyright 2013 Muthukumaran (https://github.com/muthuishere/).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.multimachine.views.console;

import com.multimachine.utils.StringHelper;
import java.awt.event.WindowEvent;
import javax.swing.text.AbstractDocument;
import javax.swing.text.StyledDocument;
import org.apache.log4j.Logger;

/**
 *
 * @author hutchuk
 */
public class SwingConsoleWindow extends javax.swing.JFrame {

    private ConsoleCallBack consoleCallBack;

    String prompt;
    int commandIndex = 0;

    private static final Logger log = Logger.getLogger(SwingConsoleWindow.class);

    public SwingConsoleWindow(String shellname, ConsoleCallBack consoleCallBack) {
        this(shellname, "", consoleCallBack);
        this.setAlwaysOnTop(true);
    }

    @ConsoleCommand("clear")
    public void clearTxt() {
        log.info("This method is written to clear");

        new Thread() {
            public void run() {

                setDocumentFilter(false);
                txtAreaConsole.setText("");
                appendText(prompt);

                setDocumentFilter(true);
            }
        }.start();
    }

    @ConsoleCommand("exit")
    public void exitWindow() {
        log.info("This method is written to exit");

        this.processWindowEvent(
                new WindowEvent(
                this, WindowEvent.WINDOW_CLOSING));

    }

    public void setDocumentFilter(boolean flgEnable) {

        if (flgEnable) {
            ((AbstractDocument) txtAreaConsole.getDocument()).setDocumentFilter(
                    new CommandFilter(this));
        } else {
            ((AbstractDocument) txtAreaConsole.getDocument()).setDocumentFilter(
                    null);
        }
    }

    public void onCompleteResponse() {

        new Thread() {
            public void run() {

                setDocumentFilter(false);
                txtAreaConsole.setEditable(true);
                showPrompt();

                setDocumentFilter(true);
            }
        }.start();
    }

    public void onResponse(final String msg) {

        new Thread() {
            public void run() {

                setDocumentFilter(false);
                txtAreaConsole.setEditable(false);
                log.info(msg + "received");

                appendText(msg + StringHelper.NEW_LINE);

                setDocumentFilter(true);
            }
        }.start();
    }

    public void appendText(String txt) {
        txtAreaConsole.append(txt);

        txtAreaConsole.setCaretPosition(txtAreaConsole.getDocument().getLength());
    }

    /**
     * Creates new form SwingConsoleWindow
     */
    public SwingConsoleWindow(String shellName, String initmessage, ConsoleCallBack consoleCallBack) {
        initComponents();
        this.consoleCallBack = consoleCallBack;
        this.setTitle("Multi-Putty" + shellName);
        this.prompt = shellName + ">";

        if (!StringHelper.isEmpty(initmessage)) {
            appendText(initmessage);
        }

        appendText(prompt);
        setDocumentFilter(true);
    }

    public ConsoleCallBack getConsoleCallBack() {
        return consoleCallBack;
    }

    public void setConsoleCallBack(ConsoleCallBack consoleCallBack) {
        this.consoleCallBack = consoleCallBack;
    }

    public void showPrompt() {
        appendText(StringHelper.NEW_LINE + prompt);

        //commandIndex=txtAreaConsole.getText().length();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaConsole = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setBackground(new java.awt.Color(0, 0, 0));
        jScrollPane1.setForeground(new java.awt.Color(255, 255, 255));

        txtAreaConsole.setBackground(new java.awt.Color(0, 0, 0));
        txtAreaConsole.setColumns(20);
        txtAreaConsole.setFont(new java.awt.Font("Century Gothic", 1, 13)); // NOI18N
        txtAreaConsole.setForeground(new java.awt.Color(51, 204, 0));
        txtAreaConsole.setRows(5);
        txtAreaConsole.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtAreaConsoleKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(txtAreaConsole);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtAreaConsoleKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAreaConsoleKeyPressed
        // TODO add your handling code here:
        /*   if(evt.getKeyCode() == KeyEvent.VK_ENTER){

         new Thread(){
         public void run(){

         consoleCallBack.onCommand(getCommand());
         txtAreaConsole.setEditable(false);

         }
         }.start();
         }*/
    }//GEN-LAST:event_txtAreaConsoleKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SwingConsoleWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SwingConsoleWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SwingConsoleWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SwingConsoleWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //  new SwingConsoleWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtAreaConsole;
    // End of variables declaration//GEN-END:variables
}
